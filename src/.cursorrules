  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

  Testing
  - Use Vitest for unit testing.
  - Write tests for each component and function.
  - Use act() to handle async operations in tests.
  - Mock external dependencies and APIs.
  - Use testIDs for querying elements in tests.
  - Use beforeEach for common setup, afterEach for cleanup.
  - Keep individual tests focused on specific test cases.
  - Wrap render calls in act() when testing components with state updates.
  - Add descriptive testIDs to form elements (e.g., todo-form, todo-input).
  - Handle loading/disabled states in UI component tests.
  - Test error cases and edge conditions explicitly.
  - Avoid duplicating render calls in individual test cases.
  - Mock functions should be cleared after each test.
  - Test both success and error paths for async operations.
